/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package practica8smm;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.color.ColorSpace;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BandCombineOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import java.util.Arrays;
import javax.imageio.ImageIO;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineListener;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import sm.image.EqualizationOp;
import sm.jce.iu.Lienzo2D;
import sm.image.ImageTools;
import sm.image.LookupTableProducer;
import sm.image.SepiaOp;
import sm.image.TintOp;
import sm.image.color.ColorConvertOp;
import sm.jce.imagenes.CambioColorOp;
import sm.jce.imagenes.PosterizarOp;
import sm.jce.imagenes.RojoOp;
import sm.sound.SMClipPlayer;
import sm.sound.SMSoundRecorder;

/**
 *
 * @author juanan
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        this.setSize(800, 800);
    }

    BufferedImage imgFuente;
    SMClipPlayer player = null;
    SMSoundRecorder recorder = null;


    private Lienzo2D getSelectedLienzo() {
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        return vi != null ? vi.getLienzo2D() : null;
    }
    
    public class ManejadorAudio implements LineListener {

        @Override
        public void update(LineEvent event) {
            if (event.getType() == LineEvent.Type.START) {
                play.setEnabled(false);

            }
            if (event.getType() == LineEvent.Type.STOP) {
                play.setEnabled(true);

            }
            if (event.getType() == LineEvent.Type.CLOSE) {

            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupobotonfiguras = new javax.swing.ButtonGroup();
        jToolBar1 = new javax.swing.JToolBar();
        nuevoarchivo = new javax.swing.JButton();
        abrirfile = new javax.swing.JButton();
        guardararchivo = new javax.swing.JButton();
        abriraudio = new javax.swing.JButton();
        abrirvideo = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        linea = new javax.swing.JToggleButton();
        rectangulo = new javax.swing.JToggleButton();
        elipse = new javax.swing.JToggleButton();
        fantasma = new javax.swing.JToggleButton();
        mover = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jPanel1 = new javax.swing.JPanel();
        color = new javax.swing.JButton();
        rellenar = new javax.swing.JToggleButton();
        transparencia = new javax.swing.JToggleButton();
        alisar = new javax.swing.JToggleButton();
        grosor = new javax.swing.JSlider();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        volcado = new javax.swing.JButton();
        jSeparator13 = new javax.swing.JToolBar.Separator();
        play = new javax.swing.JButton();
        pause = new javax.swing.JButton();
        listareproduccion = new javax.swing.JComboBox<>();
        record = new javax.swing.JButton();
        camara = new javax.swing.JButton();
        captura = new javax.swing.JButton();
        barraEstado = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jToolBar2 = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        brillo = new javax.swing.JSlider();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        jLabel2 = new javax.swing.JLabel();
        contraste = new javax.swing.JSlider();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        filtros = new javax.swing.JComboBox<>();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        jLabel3 = new javax.swing.JLabel();
        cometa = new javax.swing.JSlider();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        normal = new javax.swing.JButton();
        oscurecido = new javax.swing.JButton();
        iluminado = new javax.swing.JButton();
        oscurecerclaras = new javax.swing.JButton();
        jSeparator8 = new javax.swing.JToolBar.Separator();
        jLabel4 = new javax.swing.JLabel();
        linealpuntocontrol = new javax.swing.JSlider();
        jSeparator9 = new javax.swing.JToolBar.Separator();
        rotacion180 = new javax.swing.JButton();
        incrementar = new javax.swing.JButton();
        reducir = new javax.swing.JButton();
        jSeparator10 = new javax.swing.JToolBar.Separator();
        bandas = new javax.swing.JButton();
        espaciocolor = new javax.swing.JComboBox<>();
        jSeparator11 = new javax.swing.JToolBar.Separator();
        combinar = new javax.swing.JButton();
        tintado = new javax.swing.JButton();
        sepia = new javax.swing.JButton();
        ecualizar = new javax.swing.JButton();
        rojos = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        posterizar = new javax.swing.JSlider();
        jSeparator12 = new javax.swing.JToolBar.Separator();
        jPanel3 = new javax.swing.JPanel();
        botoncolor2 = new javax.swing.JButton();
        cambiocolor = new javax.swing.JSlider();
        jPanel4 = new javax.swing.JPanel();
        botoncolor3 = new javax.swing.JButton();
        escritorio = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        archivo = new javax.swing.JMenu();
        nuevo = new javax.swing.JMenuItem();
        abrir = new javax.swing.JMenuItem();
        guardar = new javax.swing.JMenuItem();
        jSeparator14 = new javax.swing.JPopupMenu.Separator();
        abriraud = new javax.swing.JMenuItem();
        grabaraud = new javax.swing.JMenuItem();
        abrirvideomenu = new javax.swing.JMenuItem();
        imagen = new javax.swing.JMenu();
        RescaleOp = new javax.swing.JMenuItem();
        ConvolveOpMenu = new javax.swing.JMenuItem();
        AffineTransformOpMenu = new javax.swing.JMenuItem();
        LookupOpMenu = new javax.swing.JMenuItem();
        BandCombineOp = new javax.swing.JMenuItem();
        ColorConvertOp = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setRollover(true);

        nuevoarchivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        nuevoarchivo.setFocusable(false);
        nuevoarchivo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        nuevoarchivo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        nuevoarchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoarchivoActionPerformed(evt);
            }
        });
        jToolBar1.add(nuevoarchivo);

        abrirfile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        abrirfile.setFocusable(false);
        abrirfile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        abrirfile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        abrirfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirfileActionPerformed(evt);
            }
        });
        jToolBar1.add(abrirfile);

        guardararchivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        guardararchivo.setFocusable(false);
        guardararchivo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        guardararchivo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        guardararchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardararchivoActionPerformed(evt);
            }
        });
        jToolBar1.add(guardararchivo);

        abriraudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/openAudio.png"))); // NOI18N
        abriraudio.setFocusable(false);
        abriraudio.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        abriraudio.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        abriraudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abriraudioActionPerformed(evt);
            }
        });
        jToolBar1.add(abriraudio);

        abrirvideo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/AbrirVideo.png"))); // NOI18N
        abrirvideo.setFocusable(false);
        abrirvideo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        abrirvideo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        abrirvideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirvideoActionPerformed(evt);
            }
        });
        jToolBar1.add(abrirvideo);
        jToolBar1.add(jSeparator3);

        grupobotonfiguras.add(linea);
        linea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/linea.png"))); // NOI18N
        linea.setFocusable(false);
        linea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        linea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        linea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineaActionPerformed(evt);
            }
        });
        jToolBar1.add(linea);

        grupobotonfiguras.add(rectangulo);
        rectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        rectangulo.setFocusable(false);
        rectangulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rectangulo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rectangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectanguloActionPerformed(evt);
            }
        });
        jToolBar1.add(rectangulo);

        grupobotonfiguras.add(elipse);
        elipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/elipse.png"))); // NOI18N
        elipse.setFocusable(false);
        elipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        elipse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        elipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elipseActionPerformed(evt);
            }
        });
        jToolBar1.add(elipse);

        grupobotonfiguras.add(fantasma);
        fantasma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/fantasma.png"))); // NOI18N
        fantasma.setFocusable(false);
        fantasma.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        fantasma.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        fantasma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fantasmaActionPerformed(evt);
            }
        });
        jToolBar1.add(fantasma);

        mover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/seleccion.png"))); // NOI18N
        mover.setFocusable(false);
        mover.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        mover.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        mover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moverActionPerformed(evt);
            }
        });
        jToolBar1.add(mover);
        jToolBar1.add(jSeparator1);

        jPanel1.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.setLayout(new javax.swing.OverlayLayout(jPanel1));

        color.setBackground(new java.awt.Color(0, 0, 0));
        color.setMargin(new java.awt.Insets(14, 14, 14, 14));
        color.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorActionPerformed(evt);
            }
        });
        jPanel1.add(color);

        jToolBar1.add(jPanel1);

        rellenar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rellenar.png"))); // NOI18N
        rellenar.setFocusable(false);
        rellenar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rellenar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rellenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rellenarActionPerformed(evt);
            }
        });
        jToolBar1.add(rellenar);

        transparencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/transparencia.png"))); // NOI18N
        transparencia.setFocusable(false);
        transparencia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        transparencia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        transparencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transparenciaActionPerformed(evt);
            }
        });
        jToolBar1.add(transparencia);

        alisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N
        alisar.setFocusable(false);
        alisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        alisar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        alisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alisarActionPerformed(evt);
            }
        });
        jToolBar1.add(alisar);

        grosor.setMaximum(25);
        grosor.setMinimum(1);
        grosor.setValue(1);
        grosor.setPreferredSize(new java.awt.Dimension(50, 20));
        grosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                grosorStateChanged(evt);
            }
        });
        jToolBar1.add(grosor);
        jToolBar1.add(jSeparator2);

        volcado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/volcado.png"))); // NOI18N
        volcado.setFocusable(false);
        volcado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        volcado.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        volcado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volcadoActionPerformed(evt);
            }
        });
        jToolBar1.add(volcado);
        jToolBar1.add(jSeparator13);

        play.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/play.png"))); // NOI18N
        play.setFocusable(false);
        play.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        play.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playActionPerformed(evt);
            }
        });
        jToolBar1.add(play);

        pause.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/pausa.png"))); // NOI18N
        pause.setFocusable(false);
        pause.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pause.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        pause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseActionPerformed(evt);
            }
        });
        jToolBar1.add(pause);

        listareproduccion.setPreferredSize(new java.awt.Dimension(175, 24));
        jToolBar1.add(listareproduccion);

        record.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/record.png"))); // NOI18N
        record.setFocusable(false);
        record.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        record.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        record.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordActionPerformed(evt);
            }
        });
        jToolBar1.add(record);

        camara.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Camara.png"))); // NOI18N
        camara.setFocusable(false);
        camara.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        camara.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        camara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                camaraActionPerformed(evt);
            }
        });
        jToolBar1.add(camara);

        captura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Capturar.png"))); // NOI18N
        captura.setFocusable(false);
        captura.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        captura.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        captura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                capturaActionPerformed(evt);
            }
        });
        jToolBar1.add(captura);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        barraEstado.setText("Barra de estado");
        barraEstado.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(barraEstado, java.awt.BorderLayout.PAGE_END);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jToolBar2.setRollover(true);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/brillo.png"))); // NOI18N
        jToolBar2.add(jLabel1);

        brillo.setMaximum(255);
        brillo.setMinimum(-255);
        brillo.setValue(0);
        brillo.setPreferredSize(new java.awt.Dimension(50, 20));
        brillo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                brilloStateChanged(evt);
            }
        });
        brillo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                brilloFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                brilloFocusLost(evt);
            }
        });
        jToolBar2.add(brillo);
        jToolBar2.add(jSeparator5);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/contraste.png"))); // NOI18N
        jToolBar2.add(jLabel2);

        contraste.setMaximum(20);
        contraste.setMinimum(1);
        contraste.setValue(1);
        contraste.setPreferredSize(new java.awt.Dimension(50, 20));
        contraste.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                contrasteStateChanged(evt);
            }
        });
        contraste.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                contrasteFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                contrasteFocusLost(evt);
            }
        });
        jToolBar2.add(contraste);
        jToolBar2.add(jSeparator6);

        filtros.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Emborronamiento media", "Emborronamiento binomial", "Enfoque", "Relieve", "Detector de fronteras laplaciano", "Emborronamiento iluminado 3x3", "Emborronamiento iluminado 5x5" }));
        filtros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtrosActionPerformed(evt);
            }
        });
        jToolBar2.add(filtros);
        jToolBar2.add(jSeparator4);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/cometa.png"))); // NOI18N
        jToolBar2.add(jLabel3);

        cometa.setMaximum(50);
        cometa.setValue(1);
        cometa.setPreferredSize(new java.awt.Dimension(50, 20));
        cometa.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cometaStateChanged(evt);
            }
        });
        cometa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cometaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                cometaFocusLost(evt);
            }
        });
        jToolBar2.add(cometa);
        jToolBar2.add(jSeparator7);

        normal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/contraste2.png"))); // NOI18N
        normal.setFocusable(false);
        normal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        normal.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        normal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalActionPerformed(evt);
            }
        });
        jToolBar2.add(normal);

        oscurecido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/ocurecer.png"))); // NOI18N
        oscurecido.setFocusable(false);
        oscurecido.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        oscurecido.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        oscurecido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oscurecidoActionPerformed(evt);
            }
        });
        jToolBar2.add(oscurecido);

        iluminado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iluminar.png"))); // NOI18N
        iluminado.setFocusable(false);
        iluminado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        iluminado.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        iluminado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iluminadoActionPerformed(evt);
            }
        });
        jToolBar2.add(iluminado);

        oscurecerclaras.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/operador1.png"))); // NOI18N
        oscurecerclaras.setFocusable(false);
        oscurecerclaras.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        oscurecerclaras.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        oscurecerclaras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oscurecerclarasActionPerformed(evt);
            }
        });
        jToolBar2.add(oscurecerclaras);
        jToolBar2.add(jSeparator8);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/operador2.png"))); // NOI18N
        jToolBar2.add(jLabel4);

        linealpuntocontrol.setMaximum(255);
        linealpuntocontrol.setValue(128);
        linealpuntocontrol.setPreferredSize(new java.awt.Dimension(50, 20));
        linealpuntocontrol.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                linealpuntocontrolStateChanged(evt);
            }
        });
        linealpuntocontrol.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                linealpuntocontrolFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                linealpuntocontrolFocusLost(evt);
            }
        });
        jToolBar2.add(linealpuntocontrol);
        jToolBar2.add(jSeparator9);

        rotacion180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotar180.png"))); // NOI18N
        rotacion180.setToolTipText("");
        rotacion180.setFocusable(false);
        rotacion180.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rotacion180.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rotacion180.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion180ActionPerformed(evt);
            }
        });
        jToolBar2.add(rotacion180);

        incrementar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/mas.png"))); // NOI18N
        incrementar.setFocusable(false);
        incrementar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        incrementar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        incrementar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                incrementarActionPerformed(evt);
            }
        });
        jToolBar2.add(incrementar);

        reducir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/menos.png"))); // NOI18N
        reducir.setFocusable(false);
        reducir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        reducir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        reducir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reducirActionPerformed(evt);
            }
        });
        jToolBar2.add(reducir);
        jToolBar2.add(jSeparator10);

        bandas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/bandas.png"))); // NOI18N
        bandas.setFocusable(false);
        bandas.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bandas.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bandas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bandasActionPerformed(evt);
            }
        });
        jToolBar2.add(bandas);

        espaciocolor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "RGB", "YCC", "GREY", " " }));
        espaciocolor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                espaciocolorActionPerformed(evt);
            }
        });
        jToolBar2.add(espaciocolor);
        jToolBar2.add(jSeparator11);

        combinar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/combinar.png"))); // NOI18N
        combinar.setFocusable(false);
        combinar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        combinar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        combinar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combinarActionPerformed(evt);
            }
        });
        jToolBar2.add(combinar);

        tintado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/tintar.png"))); // NOI18N
        tintado.setFocusable(false);
        tintado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tintado.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tintado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tintadoActionPerformed(evt);
            }
        });
        jToolBar2.add(tintado);

        sepia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sepia.png"))); // NOI18N
        sepia.setFocusable(false);
        sepia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sepia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        sepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sepiaActionPerformed(evt);
            }
        });
        jToolBar2.add(sepia);

        ecualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/ecualizar.png"))); // NOI18N
        ecualizar.setFocusable(false);
        ecualizar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ecualizar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ecualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ecualizarActionPerformed(evt);
            }
        });
        jToolBar2.add(ecualizar);

        rojos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rojo.png"))); // NOI18N
        rojos.setFocusable(false);
        rojos.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rojos.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rojos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rojosActionPerformed(evt);
            }
        });
        jToolBar2.add(rojos);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/posterizar.png"))); // NOI18N
        jToolBar2.add(jLabel5);

        posterizar.setMaximum(20);
        posterizar.setMinimum(2);
        posterizar.setToolTipText("");
        posterizar.setPreferredSize(new java.awt.Dimension(50, 20));
        posterizar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                posterizarStateChanged(evt);
            }
        });
        posterizar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                posterizarFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                posterizarFocusLost(evt);
            }
        });
        jToolBar2.add(posterizar);
        jToolBar2.add(jSeparator12);

        jPanel3.setLayout(new javax.swing.OverlayLayout(jPanel3));

        botoncolor2.setBackground(new java.awt.Color(0, 0, 0));
        botoncolor2.setMargin(new java.awt.Insets(14, 14, 14, 14));
        botoncolor2.setPreferredSize(new java.awt.Dimension(15, 15));
        botoncolor2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botoncolor2ActionPerformed(evt);
            }
        });
        jPanel3.add(botoncolor2);

        jToolBar2.add(jPanel3);

        cambiocolor.setMaximum(360);
        cambiocolor.setValue(1);
        cambiocolor.setPreferredSize(new java.awt.Dimension(50, 20));
        cambiocolor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cambiocolorStateChanged(evt);
            }
        });
        cambiocolor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cambiocolorFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                cambiocolorFocusLost(evt);
            }
        });
        jToolBar2.add(cambiocolor);

        jPanel4.setLayout(new javax.swing.OverlayLayout(jPanel4));

        botoncolor3.setBackground(new java.awt.Color(255, 0, 0));
        botoncolor3.setMargin(new java.awt.Insets(14, 14, 14, 14));
        botoncolor3.setPreferredSize(new java.awt.Dimension(15, 15));
        botoncolor3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botoncolor3ActionPerformed(evt);
            }
        });
        jPanel4.add(botoncolor3);

        jToolBar2.add(jPanel4);

        jPanel2.add(jToolBar2, java.awt.BorderLayout.PAGE_END);

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1078, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 178, Short.MAX_VALUE)
        );

        jPanel2.add(escritorio, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        archivo.setText("Archivo");

        nuevo.setText("Nuevo");
        nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoActionPerformed(evt);
            }
        });
        archivo.add(nuevo);

        abrir.setText("Abrir");
        abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirActionPerformed(evt);
            }
        });
        archivo.add(abrir);

        guardar.setText("Guardar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });
        archivo.add(guardar);
        archivo.add(jSeparator14);

        abriraud.setText("Abrir Audio");
        abriraud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abriraudActionPerformed(evt);
            }
        });
        archivo.add(abriraud);

        grabaraud.setText("Grabar Audio");
        archivo.add(grabaraud);

        abrirvideomenu.setText("Abrir Video");
        abrirvideomenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirvideomenuActionPerformed(evt);
            }
        });
        archivo.add(abrirvideomenu);

        jMenuBar1.add(archivo);

        imagen.setText("Imagen");

        RescaleOp.setText("RescaleOp");
        RescaleOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RescaleOpActionPerformed(evt);
            }
        });
        imagen.add(RescaleOp);

        ConvolveOpMenu.setText("ConvolveOp");
        ConvolveOpMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConvolveOpMenuActionPerformed(evt);
            }
        });
        imagen.add(ConvolveOpMenu);

        AffineTransformOpMenu.setText("AffineTransformOp");
        AffineTransformOpMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AffineTransformOpMenuActionPerformed(evt);
            }
        });
        imagen.add(AffineTransformOpMenu);

        LookupOpMenu.setText("LookupOp");
        LookupOpMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LookupOpMenuActionPerformed(evt);
            }
        });
        imagen.add(LookupOpMenu);

        BandCombineOp.setText("BandCombineOp");
        BandCombineOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BandCombineOpActionPerformed(evt);
            }
        });
        imagen.add(BandCombineOp);

        ColorConvertOp.setText("ColorConvertOp");
        ColorConvertOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColorConvertOpActionPerformed(evt);
            }
        });
        imagen.add(ColorConvertOp);

        jMenuBar1.add(imagen);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoActionPerformed
        VentanaInterna vi = new VentanaInterna();
        escritorio.add(vi);
        vi.setVisible(true);
        BufferedImage img;
        img = new BufferedImage(300, 300, BufferedImage.TYPE_INT_RGB);

        // Rellenar la imagen con color blanco
        Graphics2D g2d = img.createGraphics();
        g2d.setColor(Color.WHITE);
        g2d.fillRect(0, 0, img.getWidth(), img.getHeight());
        g2d.dispose(); // Liberar recursos

        vi.getLienzo2D().setImage(img);


    }//GEN-LAST:event_nuevoActionPerformed

    private void abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                BufferedImage img = ImageIO.read(f);
                VentanaInterna vi = new VentanaInterna();
                vi.getLienzo2D().setImage(img);
                this.escritorio.add(vi);
                vi.setTitle(f.getName());
                vi.setVisible(true);
            } catch (Exception ex) {
                System.err.println("Error al leer la imagen");
            }
        }
    }//GEN-LAST:event_abrirActionPerformed

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getPaintedImage();
            if (img != null) {
                JFileChooser dlg = new JFileChooser();
                int resp = dlg.showSaveDialog(this);
                if (resp == JFileChooser.APPROVE_OPTION) {
                    try {
                        File f = dlg.getSelectedFile();
                        ImageIO.write(img, "jpg", f);
                        vi.setTitle(f.getName());
                    } catch (Exception ex) {
                        System.err.println("Error al guardar la imagen");
                    }
                }
            }
        }
    }//GEN-LAST:event_guardarActionPerformed

    private void lineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineaActionPerformed
        if (this.getSelectedLienzo() != null) {
            this.getSelectedLienzo().setHerramienta(Lienzo2D.Forma.LINEA);
        }
        this.barraEstado.setText("Herramienta seleccionada: Línea");
    }//GEN-LAST:event_lineaActionPerformed

    private void rectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectanguloActionPerformed
        if (this.getSelectedLienzo() != null) {
            this.getSelectedLienzo().setHerramienta(Lienzo2D.Forma.RECTANGULO);
        }
        this.barraEstado.setText("Herramienta seleccionada: Rectángulo");
    }//GEN-LAST:event_rectanguloActionPerformed

    private void elipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elipseActionPerformed
        if (this.getSelectedLienzo() != null) {
            this.getSelectedLienzo().setHerramienta(Lienzo2D.Forma.ELIPSE);
        }
        this.barraEstado.setText("Herramienta seleccionada: Elipse");
    }//GEN-LAST:event_elipseActionPerformed

    private void colorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorActionPerformed
        if (this.getSelectedLienzo() != null) {
            Color initialColor = this.getSelectedLienzo().getColor();
            Color color = JColorChooser.showDialog(this, "Elije un color", initialColor);
            this.getSelectedLienzo().setColor(color);
            this.getSelectedLienzo().setColorFiguraSeleccionada(color);
            JButton button = (JButton) evt.getSource();
            button.setBackground(color);
        }
    }//GEN-LAST:event_colorActionPerformed

    private void fantasmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fantasmaActionPerformed
        if (this.getSelectedLienzo() != null) {
            this.getSelectedLienzo().setHerramienta(Lienzo2D.Forma.FANTASMA);
        }
        this.barraEstado.setText("Herramienta seleccionada: Fantasma");
    }//GEN-LAST:event_fantasmaActionPerformed

    private void moverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moverActionPerformed
        if (this.getSelectedLienzo() != null)
            this.getSelectedLienzo().setMover(mover.isSelected());
    }//GEN-LAST:event_moverActionPerformed

    private void rellenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rellenarActionPerformed
        if (this.getSelectedLienzo() != null) {
            this.getSelectedLienzo().setRelleno(rellenar.isSelected());
            this.getSelectedLienzo().setRellenoFiguraSeleccionada(rellenar.isSelected());
        }
    }//GEN-LAST:event_rellenarActionPerformed

    private void transparenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transparenciaActionPerformed
        if (this.getSelectedLienzo() != null) {
            this.getSelectedLienzo().setTransparencia(transparencia.isSelected());
            this.getSelectedLienzo().setTransparenciaSeleccionada(transparencia.isSelected());
        }
    }//GEN-LAST:event_transparenciaActionPerformed

    private void alisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alisarActionPerformed
        if (this.getSelectedLienzo() != null) {
            this.getSelectedLienzo().setAlisado(alisar.isSelected());
            this.getSelectedLienzo().setAlisadoSeleccionada(alisar.isSelected());
        }
    }//GEN-LAST:event_alisarActionPerformed

    private void grosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_grosorStateChanged

        float grosorValor = ((Number) grosor.getValue()).floatValue();
        if (this.getSelectedLienzo() != null) {
            getSelectedLienzo().setGrosor(grosorValor);
            getSelectedLienzo().setGrosorFiguraSeleccionada(grosorValor);
        }
        this.repaint();
    }//GEN-LAST:event_grosorStateChanged

    private void nuevoarchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoarchivoActionPerformed
        this.nuevoActionPerformed(evt);
    }//GEN-LAST:event_nuevoarchivoActionPerformed

    private void abrirfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirfileActionPerformed
        this.abrirActionPerformed(evt);
    }//GEN-LAST:event_abrirfileActionPerformed

    private void guardararchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardararchivoActionPerformed
        this.guardarActionPerformed(evt);
    }//GEN-LAST:event_guardararchivoActionPerformed

    private void RescaleOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RescaleOpActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    RescaleOp rop = new RescaleOp(1.0F, 100.0F, null);
                    rop.filter(img, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }

    }//GEN-LAST:event_RescaleOpActionPerformed

    private void volcadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volcadoActionPerformed
        if (this.getSelectedLienzo() != null) {
            this.getSelectedLienzo().volcarFiguraSeleccionadaEnImagen();
        }
    }//GEN-LAST:event_volcadoActionPerformed

    private void ConvolveOpMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConvolveOpMenuActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {

                    float filtro[] = {0.1f, 0.1f, 0.1f, 0.1f, 0.2f, 0.1f, 0.1f, 0.1f, 0.1f};
                    Kernel k = new Kernel(3, 3, filtro);
                    ConvolveOp cop = new ConvolveOp(k);
                    BufferedImage imgdest = cop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }

    }//GEN-LAST:event_ConvolveOpMenuActionPerformed

    private void brilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_brilloStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    RescaleOp rop = new RescaleOp(1.0F, brillo.getValue(), null);
                    BufferedImage imgdest = rop.filter(imgFuente, vi.getLienzo2D().getImage());
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_brilloStateChanged

    private void brilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloFocusGained
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo2D().getImage().getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImage().copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImage().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_brilloFocusGained

    private void brilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloFocusLost
        imgFuente = null;
        brillo.setValue(0);
    }//GEN-LAST:event_brilloFocusLost

    private void contrasteStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_contrasteStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    RescaleOp rop = new RescaleOp(contraste.getValue() / 10.0F, 0.0F, null);
                    BufferedImage imgdest = rop.filter(imgFuente, vi.getLienzo2D().getImage());
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_contrasteStateChanged

    private void contrasteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_contrasteFocusGained
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo2D().getImage().getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImage().copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImage().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_contrasteFocusGained

    private void contrasteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_contrasteFocusLost
        imgFuente = null;
        contraste.setValue(1);
    }//GEN-LAST:event_contrasteFocusLost

    private void filtrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtrosActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            String filtroSeleccionado = (String) filtros.getSelectedItem();
            switch (filtroSeleccionado) {
                case "Emborronamiento media":
                    vi.getLienzo2D().aplicarFiltroMedia();
                    break;
                case "Emborronamiento binomial":
                    vi.getLienzo2D().aplicarFiltroBinomial();
                    break;
                case "Enfoque":
                    vi.getLienzo2D().aplicarFiltroEnfoque();
                    break;
                case "Relieve":
                    vi.getLienzo2D().aplicarFiltroRelieve();
                    break;
                case "Detector de fronteras laplaciano":
                    vi.getLienzo2D().aplicarFiltroLaplaciano();
                    break;
                case "Emborronamiento iluminado 3x3":
                    vi.getLienzo2D().aplicarFiltroEmborronamientoIluminado3x3();
                    break;
                case "Emborronamiento iluminado 5x5":
                    vi.getLienzo2D().aplicarFiltroEmborronamientoIluminado5x5();
                    break;
                default:
                    break;
            }
        }
    }//GEN-LAST:event_filtrosActionPerformed

    private void AffineTransformOpMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AffineTransformOpMenuActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    AffineTransform at = AffineTransform.getScaleInstance(1.5, 1.5);
                    AffineTransformOp atop = new AffineTransformOp(at, null);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_AffineTransformOpMenuActionPerformed

    private void LookupOpMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LookupOpMenuActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            img = ImageTools.convertImageType(img, BufferedImage.TYPE_INT_ARGB);
            if (img != null) {
                try {
                    byte funcionT[] = new byte[256];
                    for (int x = 0; x < 256; x++) {
                        funcionT[x] = (byte) (255 - x); // Negativo
                    }
                    LookupTable tabla = new ByteLookupTable(0, funcionT);
                    LookupOp lop = new LookupOp(tabla, null);
                    BufferedImage imgdest = lop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_LookupOpMenuActionPerformed

    private void normalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    int type = LookupTableProducer.TYPE_SFUNCION;
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter(img, img); // Imagen origen y destino iguales
                    vi.getLienzo2D().repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_normalActionPerformed

    private void oscurecidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oscurecidoActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    int type = LookupTableProducer.TYPE_POWER;
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter(img, img); // Imagen origen y destino iguales
                    vi.getLienzo2D().repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_oscurecidoActionPerformed

    private void iluminadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iluminadoActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    int type = LookupTableProducer.TYPE_LOGARITHM;
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter(img, img); // Imagen origen y destino iguales
                    vi.getLienzo2D().repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_iluminadoActionPerformed

    private void rotacion180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion180ActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    double r = Math.toRadians(180);
                    Point c = new Point(img.getWidth() / 2, img.getHeight() / 2);
                    AffineTransform at = AffineTransform.getRotateInstance(r, c.x, c.y);
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_rotacion180ActionPerformed

    private void incrementarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_incrementarActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    AffineTransform at = AffineTransform.getScaleInstance(1.25, 1.25);
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_incrementarActionPerformed

    private void reducirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reducirActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    AffineTransform at = AffineTransform.getScaleInstance(0.75, 0.75);
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_reducirActionPerformed

    private void BandCombineOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BandCombineOpActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    float[][] matriz = {{1.0F, 0.0F, 0.0F},
                    {0.0F, 0.0F, 1.0F},
                    {0.0F, 1.0F, 0.0F}};
                    BandCombineOp bcop = new BandCombineOp(matriz, null);
                    bcop.filter(img.getRaster(), img.getRaster());
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_BandCombineOpActionPerformed

    private void ColorConvertOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColorConvertOpActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                    ColorConvertOp op = new ColorConvertOp(cs, null);
                    BufferedImage imgdest = op.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);

                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ColorConvertOpActionPerformed

    private void combinarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combinarActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    float[][] matriz = {
                        {0.0F, 0.5F, 0.5F},
                        {0.5F, 0.0F, 0.5F},
                        {0.5F, 0.5F, 0.0F}
                    };
                    BandCombineOp bcop = new BandCombineOp(matriz, null);
                    BufferedImage imgDest = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_RGB);
                    bcop.filter(img.getRaster(), imgDest.getRaster());
                    vi.getLienzo2D().setImage(imgDest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_combinarActionPerformed

    private void bandasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bandasActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    for (int i = 0; i < img.getRaster().getNumBands(); i++) {
                        BufferedImage imgbanda = vi.getLienzo2D().getImageBand(img, i);
                        vi = new VentanaInterna();
                        vi.getLienzo2D().setImage(imgbanda);
                        escritorio.add(vi);
                        vi.setVisible(true);
                    }
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_bandasActionPerformed

    private void cometaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cometaStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                        int tamañoMascara = (int) cometa.getValue();
                        float[] datosMascara = vi.getLienzo2D().calcularMascaraEmborronamiento(tamañoMascara);
                        Kernel k = new Kernel(tamañoMascara, 1, datosMascara);
                        ConvolveOp cop = new ConvolveOp(k, ConvolveOp.EDGE_NO_OP, null);
                        BufferedImage imgdest = cop.filter(imgFuente, null);
                        vi.getLienzo2D().setImage(imgdest);
                        vi.getLienzo2D().repaint();
                        System.out.println("Valor de la máscara aplicada: " + Arrays.toString(datosMascara)); 
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_cometaStateChanged

    private void cometaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cometaFocusGained
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                ColorModel cm = img.getColorModel();
                WritableRaster raster = img.copyData(null);
                boolean alfaPre = img.isAlphaPremultiplied();
                imgFuente = new BufferedImage(cm, raster, alfaPre, null);
            }
        }
    }//GEN-LAST:event_cometaFocusGained

    private void cometaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cometaFocusLost
        imgFuente = null;
    }//GEN-LAST:event_cometaFocusLost

    private void oscurecerclarasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oscurecerclarasActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {

                    LookupTable tabla = vi.getLienzo2D().oscurecerZonasClaras();
                    LookupOp lop = new LookupOp(tabla, null);
                    lop.filter(img, img);
                    vi.getLienzo2D().repaint();

                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_oscurecerclarasActionPerformed

    private void linealpuntocontrolStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_linealpuntocontrolStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    float a = linealpuntocontrol.getValue();
                    LookupTable tabla = vi.getLienzo2D().aplicarTransformacionLinealPuntoControl(a);
                    LookupOp lop = new LookupOp(tabla, null);
                    lop.filter(imgFuente, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_linealpuntocontrolStateChanged

    private void linealpuntocontrolFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_linealpuntocontrolFocusGained
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                ColorModel cm = img.getColorModel();
                WritableRaster raster = img.copyData(null);
                boolean alfaPre = img.isAlphaPremultiplied();
                imgFuente = new BufferedImage(cm, raster, alfaPre, null);
            }
        }
    }//GEN-LAST:event_linealpuntocontrolFocusGained

    private void linealpuntocontrolFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_linealpuntocontrolFocusLost
        imgFuente = null;
    }//GEN-LAST:event_linealpuntocontrolFocusLost

    private void espaciocolorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_espaciocolorActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {

                    String espacioColorSeleccionado = (String) espaciocolor.getSelectedItem();

                    ColorSpace cs;
                    switch (espacioColorSeleccionado) {
                        case "RGB":
                            cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
                            break;
                        case "YCC":
                            cs = ColorSpace.getInstance(ColorSpace.CS_PYCC);
                            break;
                        case "GREY":
                            cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                            break;
                        default:
                            cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
                    }

                    // Comprobar si la imagen ya está en el espacio de color seleccionado
                    if (img.getColorModel().getColorSpace().getType() == cs.getType()) {
                        System.out.println("La imagen ya está en el espacio de color seleccionado.");
                    } else {
                        ColorConvertOp op = new ColorConvertOp(cs, null);
                        BufferedImage imgdest = op.filter(img, null);

                        VentanaInterna nuevaVentana = new VentanaInterna();
                        nuevaVentana.getLienzo2D().setImage(imgdest);
                        escritorio.add(nuevaVentana);
                        nuevaVentana.setVisible(true);
                    }

                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_espaciocolorActionPerformed

    private void tintadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tintadoActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    Color color = vi.getLienzo2D().getColor();
                    TintOp tintado = new TintOp(color, 0.5f);
                    tintado.filter(img, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_tintadoActionPerformed

    private void sepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sepiaActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    SepiaOp sepia = new SepiaOp();
                    sepia.filter(img, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sepiaActionPerformed

    private void ecualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ecualizarActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    EqualizationOp ecualizacion = new EqualizationOp();
                    ecualizacion.filter(img, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ecualizarActionPerformed

    private void posterizarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_posterizarStateChanged
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    int niveles = posterizar.getValue();
                    PosterizarOp posterizacion = new PosterizarOp(niveles);
                    posterizacion.filter(imgFuente, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println("Error durante la posterización: " + e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_posterizarStateChanged

    private void posterizarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_posterizarFocusLost
        imgFuente = null;
        posterizar.setValue(20);
    }//GEN-LAST:event_posterizarFocusLost

    private void posterizarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_posterizarFocusGained
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                ColorModel cm = img.getColorModel();
                WritableRaster raster = img.copyData(null);
                boolean alfaPre = img.isAlphaPremultiplied();
                imgFuente = new BufferedImage(cm, raster, alfaPre, null);
            }
        }
    }//GEN-LAST:event_posterizarFocusGained

    private void rojosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rojosActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {

                    int umbral = 0; //Umbral de rojo puro
                    RojoOp rojo = new RojoOp(umbral);
                    rojo.filter(img, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_rojosActionPerformed

    private void botoncolor2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botoncolor2ActionPerformed
        if (this.getSelectedLienzo() != null) {
            Color colorboton2 = JColorChooser.showDialog(this, "Elige un color", botoncolor2.getBackground());
            if (colorboton2 != null) {

                botoncolor2.setBackground(colorboton2);
            }
        }
    }//GEN-LAST:event_botoncolor2ActionPerformed

    private void botoncolor3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botoncolor3ActionPerformed
        if (this.getSelectedLienzo() != null) {
            Color colorboton3 = JColorChooser.showDialog(this, "Elige un color", botoncolor3.getBackground());
            if (colorboton3 != null) {
                botoncolor3.setBackground(colorboton3);
            }
        }
    }//GEN-LAST:event_botoncolor3ActionPerformed

    private void cambiocolorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cambiocolorStateChanged
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {

                    Color colorC1 = botoncolor2.getBackground();
                    Color colorC2 = botoncolor3.getBackground();
                    int umbral = cambiocolor.getValue();

                    CambioColorOp cambiocolor = new CambioColorOp(colorC1, colorC2, umbral);
                    cambiocolor.filter(imgFuente, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println("Error durante el cambio de color: " + e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_cambiocolorStateChanged

    private void cambiocolorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cambiocolorFocusGained
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                ColorModel cm = img.getColorModel();
                WritableRaster raster = img.copyData(null);
                boolean alfaPre = img.isAlphaPremultiplied();
                imgFuente = new BufferedImage(cm, raster, alfaPre, null);
            }
        }
    }//GEN-LAST:event_cambiocolorFocusGained

    private void cambiocolorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cambiocolorFocusLost
        imgFuente = null;
        cambiocolor.setValue(1);
    }//GEN-LAST:event_cambiocolorFocusLost

    private void abriraudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abriraudioActionPerformed
        this.abriraudActionPerformed(evt);
    }//GEN-LAST:event_abriraudioActionPerformed

    private void abriraudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abriraudActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = new File(dlg.getSelectedFile().getAbsolutePath()) {
                    @Override
                    public String toString() {

                        return this.getName();
                    }
                };
                // Añadimos el objeto a la lista de reproduccion
                listareproduccion.addItem(f);
                listareproduccion.setSelectedItem(f);
            } catch (Exception ex) {
                System.err.println("Error al leer el archivo de audio");
            }
        }
    }//GEN-LAST:event_abriraudActionPerformed

    private void playActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playActionPerformed
        File f = (File) listareproduccion.getSelectedItem();
        if (f != null) {
            player = new SMClipPlayer(f);
            
            if (player != null) {
                player.addLineListener(new ManejadorAudio());
                player.play();
            }
        }
    }//GEN-LAST:event_playActionPerformed

    private void pauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseActionPerformed
        if (recorder != null) {
            recorder.stop();
            recorder = null;
        }
        if (player != null) {
            player.stop();
            player = null;
        }
    }//GEN-LAST:event_pauseActionPerformed

    private void recordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showSaveDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = new File(dlg.getSelectedFile().getAbsolutePath()) {
                    @Override
                    public String toString() {

                        return this.getName();
                    }
                };
                recorder = new SMSoundRecorder(f);
                recorder.addLineListener(new ManejadorAudio());
                if (recorder != null) {
                    recorder.record();
                    listareproduccion.addItem(f);
                    listareproduccion.setSelectedItem(f);
                }
            } catch (Exception ex) {
                System.err.println("Error al leer el archivo de audio");
            }
        }
    }//GEN-LAST:event_recordActionPerformed

    private void abrirvideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirvideoActionPerformed
        this.abrirvideomenuActionPerformed(evt);
    }//GEN-LAST:event_abrirvideoActionPerformed

    private void abrirvideomenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirvideomenuActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = new File(dlg.getSelectedFile().getAbsolutePath()) {
                    @Override
                    public String toString() {

                        return this.getName();
                    }
                };
                // Añadimos el objeto a la lista de reproduccion
                listareproduccion.addItem(f);
                listareproduccion.setSelectedItem(f);
            } catch (Exception ex) {
                System.err.println("Error al leer el archivo de audio");
            }
        }
    }//GEN-LAST:event_abrirvideomenuActionPerformed

    private void camaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_camaraActionPerformed
        VentanaInternaCamara vc = VentanaInternaCamara.getInstance();
        if(vc!=null){
            escritorio.add(vc);
            vc.setVisible(true);
        }
    }//GEN-LAST:event_camaraActionPerformed

    private void capturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_capturaActionPerformed
        VentanaInternaCamara vc = (VentanaInternaCamara) escritorio.getSelectedFrame();
        if (vc != null) {
            BufferedImage img = vc.getImage();
            VentanaInterna vi = new VentanaInterna();
            vi.getLienzo2D().setImage(img);
            escritorio.add(vi);
            vi.setVisible(true);
        }
    }//GEN-LAST:event_capturaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AffineTransformOpMenu;
    private javax.swing.JMenuItem BandCombineOp;
    private javax.swing.JMenuItem ColorConvertOp;
    private javax.swing.JMenuItem ConvolveOpMenu;
    private javax.swing.JMenuItem LookupOpMenu;
    private javax.swing.JMenuItem RescaleOp;
    private javax.swing.JMenuItem abrir;
    private javax.swing.JMenuItem abriraud;
    private javax.swing.JButton abriraudio;
    private javax.swing.JButton abrirfile;
    private javax.swing.JButton abrirvideo;
    private javax.swing.JMenuItem abrirvideomenu;
    private javax.swing.JToggleButton alisar;
    private javax.swing.JMenu archivo;
    private javax.swing.JButton bandas;
    private javax.swing.JLabel barraEstado;
    private javax.swing.JButton botoncolor2;
    private javax.swing.JButton botoncolor3;
    private javax.swing.JSlider brillo;
    private javax.swing.JButton camara;
    private javax.swing.JSlider cambiocolor;
    private javax.swing.JButton captura;
    private javax.swing.JButton color;
    private javax.swing.JButton combinar;
    private javax.swing.JSlider cometa;
    private javax.swing.JSlider contraste;
    private javax.swing.JButton ecualizar;
    private javax.swing.JToggleButton elipse;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JComboBox<String> espaciocolor;
    private javax.swing.JToggleButton fantasma;
    private javax.swing.JComboBox<String> filtros;
    private javax.swing.JMenuItem grabaraud;
    private javax.swing.JSlider grosor;
    private javax.swing.ButtonGroup grupobotonfiguras;
    private javax.swing.JMenuItem guardar;
    private javax.swing.JButton guardararchivo;
    private javax.swing.JButton iluminado;
    private javax.swing.JMenu imagen;
    private javax.swing.JButton incrementar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator10;
    private javax.swing.JToolBar.Separator jSeparator11;
    private javax.swing.JToolBar.Separator jSeparator12;
    private javax.swing.JToolBar.Separator jSeparator13;
    private javax.swing.JPopupMenu.Separator jSeparator14;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JToolBar.Separator jSeparator8;
    private javax.swing.JToolBar.Separator jSeparator9;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToggleButton linea;
    private javax.swing.JSlider linealpuntocontrol;
    private javax.swing.JComboBox<File> listareproduccion;
    private javax.swing.JToggleButton mover;
    private javax.swing.JButton normal;
    private javax.swing.JMenuItem nuevo;
    private javax.swing.JButton nuevoarchivo;
    private javax.swing.JButton oscurecerclaras;
    private javax.swing.JButton oscurecido;
    private javax.swing.JButton pause;
    private javax.swing.JButton play;
    private javax.swing.JSlider posterizar;
    private javax.swing.JButton record;
    private javax.swing.JToggleButton rectangulo;
    private javax.swing.JButton reducir;
    private javax.swing.JToggleButton rellenar;
    private javax.swing.JButton rojos;
    private javax.swing.JButton rotacion180;
    private javax.swing.JButton sepia;
    private javax.swing.JButton tintado;
    private javax.swing.JToggleButton transparencia;
    private javax.swing.JButton volcado;
    // End of variables declaration//GEN-END:variables
}
